# This workflow will upload a Python Package using Twine when a release is created
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-python#publishing-to-package-registries

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Upload Python Package

on:
  push:
    branches:
      - main

permissions:
  contents: read

jobs:
  deploy:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up Python
      uses: actions/setup-python@v3
      with:
        python-version: '3.x'
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
    - name: Build package
      run: python -m build
    - name: Publish package
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        user: __token__
        password: ${{ secrets.PYPI_API_TOKEN }}
    - name: push a new tag for the docker image
      run: |
        mkdir docker_container && cd docker_container
        git clone https://jStrider:${{ secrets.GIT_TOKEN }}@github.com/jStrider/Discord_bot_docker.git
        cd Discord_bot_docker
        git config --global user.email "${GITHUB_ACTOR}"
        git config --global user.name "${GITHUB_ACTOR}@users.noreply.github.com"
        git tag -a $(git describe --tags | awk -F. '{$NF = $NF + 1;} 1' | sed 's/ /./g') -m "new version pushed from the github action of the python project botgpt"
        git push --tags
